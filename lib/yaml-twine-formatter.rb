require 'yaml'

module Twine
  module Formatters
    class Yaml < Abstract
      def format_name
        'yaml'
      end

      def extension
        '.yml'
      end

      def can_handle_directory?(path)
        false
      end

      def default_file_name
        'strings.yml'
      end

      def format_header(lang)
        "# YAML\n# Generated by Twine #{Twine::VERSION}\n# Language: #{lang}\n"
      end

      def format_sections(twine_file, lang)
        sections = get_key_value_table(twine_file.sections, lang)
        YAML.dump(sections)
      end
      
      def get_key_value_table(sections, lang)
        table = {}
        
        sections.each do |section|
          section.definitions.each do |definition|
          	next unless definition.translations.include? lang
            table["[[#{section.name}]].[#{definition.key}]"] = definition.translations[lang]
          end
        end
        
        table
      end
    end
  end
end

Twine::Formatters.formatters << Twine::Formatters::Yaml.new
